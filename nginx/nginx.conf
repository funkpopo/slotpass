# 高并发单实例优化配置
user nginx;
worker_processes auto;
worker_rlimit_nofile 100000;    # 提高文件描述符限制

events {
    worker_connections 8192;     # 提高连接数
    use epoll;
    multi_accept on;
    accept_mutex off;           # 关闭accept互斥锁提高性能
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 高并发限流配置
    limit_req_zone $binary_remote_addr zone=api:20m rate=200r/s;   # 提高限流
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:20m;
    
    # 日志格式 (简化以提升性能)
    log_format main '$remote_addr - [$time_local] "$request" '
                    '$status $body_bytes_sent '
                    'rt=$request_time';
    
    # 访问日志优化
    access_log /var/log/nginx/access.log main buffer=64k flush=5s if=$loggable;
    error_log /var/log/nginx/error.log warn;
    
    # 定义可记录日志的条件（排除静态资源）
    map $request_uri $loggable {
        ~*\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ 0;
        default 1;
    }
    
    # 性能优化设置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 10000;    # 大幅提高keep-alive复用
    types_hash_max_size 4096;
    server_tokens off;
    
    # Buffer优化
    client_body_buffer_size 128k;
    client_max_body_size 10m;
    client_header_buffer_size 4k;    # 提高header缓冲区
    large_client_header_buffers 8 8k; # 增加大header缓冲区
    output_buffers 2 64k;            # 提高输出缓冲区
    postpone_output 1460;
    
    # Timeout优化 (缩短以提高吞吐量)
    client_body_timeout 30s;
    client_header_timeout 30s;
    send_timeout 30s;
    proxy_connect_timeout 30s;
    proxy_read_timeout 30s;
    proxy_send_timeout 30s;
    
    # 文件缓存优化
    open_file_cache max=300000 inactive=20s;  # 大幅提高文件缓存
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    
    # Gzip压缩优化
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        application/ld+json
        application/manifest+json
        font/opentype;
    
    # 上游服务器配置 (单实例优化)
    upstream slotpass {
        server slotpass-app:80 max_fails=2 fail_timeout=10s;
        keepalive 64;              # 增加keep-alive连接池
        keepalive_requests 10000;  # 增加复用请求数
        keepalive_timeout 60s;
    }
    
    # 服务器配置 (单实例高并发优化)
    server {
        listen 80 default_server reuseport so_keepalive=on;
        server_name localhost;
        
        # 高并发限流应用
        limit_req zone=api burst=100 nodelay;   # 大幅提高突发处理
        limit_conn conn_limit_per_ip 200;       # 提高连接限制
        
        # 安全头
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy strict-origin-when-cross-origin always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self'" always;
        
        # 代理优化设置
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering on;
        proxy_buffer_size 8k;      # 增加缓冲区
        proxy_buffers 16 8k;       # 增加缓冲区数量
        proxy_busy_buffers_size 16k;
        
        # 静态资源缓存优化
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp)$ {
            proxy_pass http://slotpass;
            
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            
            # 静态资源无日志
            access_log off;
            
            # 预压缩支持
            gzip_static on;
        }
        
        # HTML文件优化
        location ~* \.html$ {
            proxy_pass http://slotpass;
            expires 5m;    # 短期缓存
            add_header Cache-Control "public, must-revalidate";
        }
        
        # 主路由
        location / {
            proxy_pass http://slotpass;
        }
        
        # Service Worker特殊处理
        location /sw.js {
            proxy_pass http://slotpass;
            expires 0;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
        
        # 健康检查
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Nginx状态监控
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
    }
}